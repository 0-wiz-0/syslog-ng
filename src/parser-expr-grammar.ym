%code requires {

#include "parser-expr-parser.h"

}

%code {

#include "syslog-names.h"
#include "parser-expr-grammar.h"
#include "plugin.h"

LogParser *last_parser;

}

%name-prefix "parser_expr_"
%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {GList **result}

%type	<ptr> parser_expr
%type   <ptr> parser_expr_list
%type   <ptr> parser_expr_list_build

/* INCLUDE_DECLS */

%%

start
        : parser_expr_list                       { *result = $1; if (yychar != YYEMPTY) { cfg_lexer_unput_token(lexer, &yylval); } YYACCEPT; }
	;

parser_expr_list
        : parser_expr_list_build                { $$ = g_list_reverse($1); }
        ;

parser_expr_list_build
        : parser_expr ';' parser_expr_list_build    { $$ = g_list_append($3, $1); }
        | ';' parser_expr_list_build                { $$ = $2; }
        |                                           { $$ = NULL; }
        ;


parser_expr
        : LL_IDENTIFIER
          {
            Plugin *p;
            gint context = LL_CONTEXT_PARSER;

            p = plugin_find(configuration, context, $1);
            CHECK_ERROR(p, @1, "%s plugin %s not found", cfg_lexer_lookup_context_name_by_type(context), $1);

            last_parser = (LogParser *) plugin_parse_config(p, configuration, &@1);
            free($1);
            if (!last_parser)
              {
                YYERROR;
              }
            $$ = last_parser;
          }

        ;

/* INCLUDE_RULES */

%%
