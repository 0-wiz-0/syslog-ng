%code requires {

#include "parser-expr-parser.h"

}

%code {

#include "syslog-names.h"
#include "parser-expr-grammar.h"
#include "plugin.h"

LogParser *last_parser;

}

%name-prefix "parser_expr_"
%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {GList **result}

%type	<ptr> parser_expr
%type	<ptr> parser_expr_csv
%type	<ptr> parser_expr_db
%type   <num> parser_csv_flags
%type   <ptr> parser_expr_list
%type   <ptr> parser_expr_list_build

/* INCLUDE_DECLS */

%%

start
        : parser_expr_list                       { *result = $1; if (yychar != YYEMPTY) { cfg_lexer_unput_token(lexer, &yylval); } YYACCEPT; }
	;

parser_expr_list
        : parser_expr_list_build                { $$ = g_list_reverse($1); }
        ;

parser_expr_list_build
        : parser_expr ';' parser_expr_list_build    { $$ = g_list_append($3, $1); }
        | ';' parser_expr_list_build                { $$ = $2; }
        |                                           { $$ = NULL; }
        ;


parser_expr
        : parser_expr_csv
        | parser_expr_db
        | LL_IDENTIFIER
          {
            Plugin *p;
            gint context = LL_CONTEXT_PARSER;

            p = plugin_find(configuration, context, $1);
            CHECK_ERROR(p, @1, "%s plugin %s not found", cfg_lexer_lookup_context_name_by_type(context), $1);

            last_parser = (LogParser *) plugin_new_instance(configuration, p, &@1);
            free($1);
            if (!last_parser)
              {
                YYERROR;
              }
            $$ = last_parser;
          }

        ;

parser_expr_csv
        : KW_CSV_PARSER '('
          {
            last_parser = (LogParser *) log_csv_parser_new();
          }
          parser_csv_opts
          ')'					{ $$ = last_parser; }
        ;

parser_expr_db
        : KW_DB_PARSER '('
          {
            last_parser = (LogParser *) log_db_parser_new();
          }
          parser_db_opts
          ')'                                   { $$ = last_parser; }
        ;

parser_db_opts
        : parser_db_opt parser_db_opts
        |
        ;

/* NOTE: we don't support parser_opt as we don't want the user to specify a template */
parser_db_opt
        : KW_FILE '(' string ')'                { log_db_parser_set_db_file(((LogDBParser *) last_parser), $3); free($3); }
        ;

parser_column_opt
        : parser_opt
        | KW_COLUMNS '(' string_list ')'        { log_column_parser_set_columns((LogColumnParser *) last_parser, $3); }
        ;

parser_opt
        : KW_TEMPLATE '(' string ')'            {
                                                  LogTemplate *template = cfg_check_inline_template(configuration, $3);
                                                  GError *error = NULL;

                                                  CHECK_ERROR(log_template_compile(template, &error), @3, "Error compiling template (%s)", error->message);
                                                  log_parser_set_template(last_parser, template);
                                                  free($3);
                                                }
        ;


parser_csv_opts
        : parser_csv_opt parser_csv_opts
        |
        ;

parser_csv_opt
        : parser_column_opt
        | KW_FLAGS '(' parser_csv_flags ')'     { log_csv_parser_set_flags((LogColumnParser *) last_parser, $3); }
        | KW_DELIMITERS '(' string ')'          { log_csv_parser_set_delimiters((LogColumnParser *) last_parser, $3); free($3); }
        | KW_QUOTES '(' string ')'              { log_csv_parser_set_quotes((LogColumnParser *) last_parser, $3); free($3); }
        | KW_QUOTE_PAIRS '(' string ')'         { log_csv_parser_set_quote_pairs((LogColumnParser *) last_parser, $3); free($3); }
        | KW_NULL '(' string ')'                { log_csv_parser_set_null_value((LogColumnParser *) last_parser, $3); free($3); }
        ;

parser_csv_flags
        : string parser_csv_flags               { $$ = log_csv_parser_lookup_flag($1) | $2; free($1); }
        |					{ $$ = 0; }
        ;


/* INCLUDE_RULES */

%%
