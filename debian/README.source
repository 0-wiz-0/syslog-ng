========================
syslog-ng Debian sources
========================

These sources are managed in a special setup in Git (see
debian/control, or debian/control.d/control.in in a fresh checkout)
that supports multiple upstream and multiple debian versions. The
debian packaging is kept separate from the rest of the sources, so
that one can easily merge between the debian packaging branches,
without having to worry about unintentionally pulling non-debian
changes from upstream.

For this reason, the debian branch (see the branch layout section
later) uses a submodule to pull in the appropriate version of
syslog-ng. Building from this setup is possible, it produces valid
debian packages. However, for source packages, one needs a little bit
more massaging, as we want to support using unmodified upstream
tarballs too. This part will be explained in a section of its own.

-------------
Branch Layout
-------------

There are three major branch families to note:

 * upstream/mirror/${MAJOR_VERSION}: This is a mirror of the upstream
   master branch of the appropriate major version of syslog-ng. No
   changes are applied to it, ever.
 * patched/${MAJOR_VERSION}: Non-debian specific patches, that are
   also sent upstream. Based on the upstream/mirror/${MAJOR_VERSION}
   branch, but no patches are applied directly, they're merged from
   the various feature/${MAJOR_VERSION}/${NAME} branches (see below),
   or cherry-picked from upstream.
 * packaging/debian/${MAJOR_VERSION}: Debian packaging for the
   appropriate major version, not directly related to either upstream
   or patched branches, but pulls in a snapshot of
   patched/${MAJOR_VERSION} as a submodule.

Furthermore, a couple of other branches may appear and disappear over
time, that are part of the normal development work flow:

 * feature/${MAJOR_VERSION}/${NAME}: Each feature developed is done on
   a separate branch, and sent upstream as such. These can be picked
   onto the appropriate patched branch.
 * hotfix/${MAJOR_VERSION}/${NAME}: Bugfixes and the like for the
   appropriate version, that are also sent upstream. Similarly to
   feature branches, there can be picked onto the appropriate patched
   branch.
 * sandbox/${MAJOR_VERSION}: Sandboxes for experimental patches
   mostly. These branches are often rebased, and they should not be
   relied upon.

--------------------
Development workflow
--------------------

To update the package, the following workflow should be kept:

Upgrading to a new upstream version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Pull the upstream changes as-is onto the appropriate upstream
  branch. (such as upstream/mirror/3.3)
* Merge the mirror branch into the patched branch (patched/3.3).
* Fix any conflicts caused by patches that made it upstream in a
  different way, or by conflicting upstream changes.
* Switch to the appropriate debian packaging branch
  (packaging/debian/3.3), and update the syslog-ng submodule to point
  to the desired patched branch.
* Run debian/tools/update-control.sh ${NEW_UPSTREAM_VERSION}, and
  verify that it correctly updated everything:

  + debian/control should have a libsyslog-ng-${NEW_UPSTREAM_VERSION}
    package, and libsyslog-ng-dev should depend on it.

  + The script should replace the libsyslog-ng-${VERSION}.* files
    (.install and .lintian-overrides) with updated versions. Both the
    filenames and the contents should have the new upstream version.

  Once verified, commit the changes to git. The files generated by the
  scripts are NOT stored in git, one is expected to bootstrap the
  sources by running debian/tools/bootstrap.sh.

Selectively applying upstream fixes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Pull the upstream changes as-is onto the upstream/mirror branch.
* cherry-pick the appropriate fixes to patched, or - if that is more
  appropriate - merge the dfsg branch into patched as-is.
* Update the syslog-ng submodule of the debian packaging branch.

Debian-specific changes
~~~~~~~~~~~~~~~~~~~~~~~

Debian packaging specific changes should directly go to the debian
packaging branch.

-----------------
Building from git
-----------------

To build the package from git, one will first need to initialize it,
by pulling in the appropriate submodules, and generating a few
files. This can be accomplished by running the
debian/tools/bootstrap.sh script.

---------------------
Exporting the sources
---------------------
 
The orig.tar.xz can be generated by debian/rules get-orig-source. The
packaging does not use the upstream tarballs, as it is built directly
from git.

However, the tarball generated by get-orig-source (similarly to
upstream packages) does not reside in a subdirectory, so one needs to
do some extra work to make the tree ready for a sourceful build:
export it so that debian/ is applied on top of the patched branch.

Once done, the tree is ready to be built.

With the above workflow, the patches on the patched branch will get
flattened during build into a single debian/patches/debian-changes
patch. If one wants to make modifications, that should be done in git,
not with the exported sources.

The debian/tools/export-source.sh tool automates the bulk of the
above: it sets up a directory, where the debian/ dir is merged into
the patched sources.
